////////////////////////////////////////////////
// This file is generated by URC. Do not modify.
////////////////////////////////////////////////

/** Symbols for the setting the motion request. */
namespace motion_symbols("Motion Symbols") {

  /** The motion type ids */
  enum motion.type {
    walk,
    bike,
    special_action,
    stand
  };

  /** Is dribbling requested? */
  bool output motion.dribbling;
  /** The currently requested motion type. */
  enum motion.type output motion.type;
  /** The currently executed motion type. */
  enum motion.type input executed_motion.type;

  /** The currently requested walk speed in percentage of max speed. */
  float output motion.walk_speed [0..100] "mm/s";
  /** The currently requested walk speed in x direction. */
  float output motion.walk_speed.x [-70..100] "mm/s";
  /** The currently requested percentage walk speed in x direction. */
  float output motion.walk_speed.percentage.x [-100..100] "percent";
  /** The currently requested walk speed in y direction. */
  float output motion.walk_speed.y [-50..50] "mm/s";
  /** The currently requested percentage walk speed in y direction. */
  float output motion.walk_speed.percentage.y [-100..100] "percent";
  /** The currently requested rotational walk speed. */
  float output motion.walk_speed.rot [-40.107..40.107] "deg/s";
  /** The currently requested percentage rotational walk speed. */
  float output motion.walk_speed.percentage.rot [-100..100] "percent";
  /** The x-coordinate of a currently requested walk target relative to the robot. */
  float output motion.walk_target.x;
  /** The y-coordinate of a currently requested walk target relative to the robot. */
  float output motion.walk_target.y;
  /** The rotation of a currently requested walk target relative to the robot. */
  float output motion.walk_target.rot;
  /** Whether a requested relative walk target was reached. */
  bool input motion.walk_target.reached;

  /** Allows to disable step size stabilization. */
  bool output motion.walk_pedantic;

  /** The special action ids */
  enum motion.special_action {
    play_dead,
    stand_up_back_nao,
    stand_up_front_nao,
    sit_down,
    sit_down_keeper,
    go_up,
    keeper_jump_left_sign,
    kick_diagonal_nao,
    keeper_jump_left,
    lay_down_keeper,
    left_arm_up,
    dive_keeper,
    light_kick,
    side_kick
  };

  /** The currently requested special action. */
  enum motion.special_action output motion.special_action;
  /** The last requested special action. */
  enum motion.special_action output motion.last_special_action;
  /** The currently executed special action. */
  enum motion.special_action input executed_motion.special_action;

  /** Whether the currently requested special action should be mirrored. */
  bool output motion.special_action.mirror;
  /** Whether the currently executed special action is mirrored. */
  bool input executed_motion.special_action.mirror;

  /** The kick_in_walk ids */
  enum motion.kick_in_walk {
    none,
    left,
    right,
    sidewards_left,
    sidewards_right
  };

  /** kick when robot walk */
  enum motion.kick_in_walk output motion.kick_in_walk;
}
