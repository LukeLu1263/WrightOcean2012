option striker_turn_around
{
  initial state go_turn_around_point
  {
    decision
    {
      if(abs(value=ball.x-200) < 60 && abs(value=ball.y) < 60)
        goto turn_around;
      else
        stay;
    }
    action{
      motion.type = walk;
      motion.walk_target.x = ball.x-200; 
      motion.walk_target.y = ball.y;
      motion.walk_target.rot = 0;//FIXME ball.angle; 
      motion.walk_speed = 90;//min(value0=1000, value1=obstacle.distance_to_closest_obstacle)*14/100;

      //head.control_mode =  look_active_with_ball;
      //head.use_active_vision = true;
      //head.active_vision_ball_factor = 1.0;
      head.control_mode = look_at_ball;
      head.speed = 100;
    }
  }

  state turn_around
  {
    decision {
      if(opponent_goal.free_part.angle_to_center< 0) {
        goto turn_around_positive;
      } else {
        goto turn_around_negative;
      }
    }
    action {
  head.control_mode = look_at_ball;

      //head.use_active_vision = true;
      //head.active_vision_ball_factor = 0.5;
      //head.speed = 100;
    }
  }

  state turn_around_positive
  {
    decision
    {    
      stay;
    }
    action
    { 
      head.control_mode = look_at_ball;
      motion.type = walk;
      motion.walk_target.y = 0;
      motion.walk_target.x = clip(value=sin(angle=abs(value=ball.angle))*1000, min=-400, max=400);
      motion.walk_target.rot = locator.angle_to(x=0,y=0)-90;
      motion.walk_speed = 100;
      //head.use_active_vision = false;
    }
  }
  
  state turn_around_negative
  {
    decision
    {
      stay;
    }
    action
    { 
      head.control_mode = look_at_ball;
      motion.type = walk;
      motion.walk_target.y = 0;
      motion.walk_target.x = clip(value=-sin(angle=abs(value=ball.angle))*1000, min=-400, max=400);
      motion.walk_target.rot = clip(value=ball.angle*3, min=-15, max=15);
      motion.walk_speed = 100;
      //head.use_active_vision = false;
    }
  }
}
